name: 50 - Test Web Service G1 GC

on: [ push, pull_request ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      GCNAME: "g1gc"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'microsoft'

      - name: Gather machine info
        run: |
          cat /proc/cpuinfo > cpuinfo.txt
          cat /proc/meminfo > meminfo.txt

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle Wrapper
        run: |
          pwd
          chmod 755 ./gradlew
          ./gradlew build

      - name: Log in to GitHub Container Registry
        run: |
          echo "Log in to GitHub Container Registry"
          pwd
          echo ${{ secrets.GHCR_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set lowercase repository owner
        run: echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and run container
        run: |
          docker build --file Dockerfile-${{ env.GCNAME }} -t ghcr.io/${{ env.REPO_OWNER }}/trivy-demo-${{ env.GCNAME }}:latest . 
          docker push ghcr.io/${{ env.REPO_OWNER }}/trivy-demo-${{ env.GCNAME }}:latest
          docker run --name trivy-demo-${{ env.GCNAME }} -d -p 8181:8080 ghcr.io/${{ env.REPO_OWNER }}/trivy-demo-${{ env.GCNAME }}:latest

      - name: Setup k6
        uses: grafana/setup-k6-action@v1
        with:
          k6-version: '0.51.0'  # Specify the k6 version you want to use

      - name: Run k6 tests
        uses: grafana/run-k6-action@v1
        with:
          path: |
            ./tests/health-test.js
            ./tests/greet-test.js
          flags: --out csv=${{ env.GCNAME }}-test-results.csv  # Save the results to a CSV file

      - name: Extract GC logs
        run: docker cp trivy-demo-${{ env.GCNAME }}:/app/gc.log ./gc.log

      - name: Check and rename generated files
        run: |
          pwd
          ls -ltra
          mv health-test-summary.json ${{ env.GCNAME }}-health-test-summary.json
          mv greet-test-summary.json ${{ env.GCNAME }}-greet-test-summary.json
          mv gc.log ${{ env.GCNAME }}-gc.log
          ls -ltra

      - name: Debug GCEasy upload
        run: |
          curl -X POST "https://gceasy.io/analyzeGC?apiKey=${{ secrets.GCEASY_API_KEY }}" \
          -H "Content-Type: text/plain" \
          --data-binary "@${{ env.GCNAME }}-gc.log" \
          -o gceasy-response-${{ env.GCNAME }}.json || (cat gceasy-response-${{ env.GCNAME }}.json && exit 1)

      - name: Extract and save GC values to a text file
        run: |
          # Use jq to extract required values from the JSON response
          GC_RESPONSE_FILE="gceasy-response-${{ env.GCNAME }}.json"

          # Extract values
          average_pause_time=$(jq '.gcKPI.averagePauseTime' $GC_RESPONSE_FILE)
          max_pause_time=$(jq '.gcKPI.maxPauseTime' $GC_RESPONSE_FILE)
          throughput_percentage=$(jq '.gcKPI.throughputPercentage' $GC_RESPONSE_FILE)
          minor_gc_count=$(jq '.gcStatistics.minorGCCount' $GC_RESPONSE_FILE)
          full_gc_count=$(jq '.gcStatistics.fullGCCount' $GC_RESPONSE_FILE)
          avg_allocation_rate=$(jq '.gcStatistics.avgAllocationRate' $GC_RESPONSE_FILE)

          # Save extracted values to a text file
          echo "GC Log Analysis Report" > gc_analysis_report.txt
          echo "------------------------" >> gc_analysis_report.txt
          echo "Average Pause Time: $average_pause_time sec" >> gc_analysis_report.txt
          echo "Max Pause Time: $max_pause_time sec" >> gc_analysis_report.txt
          echo "Throughput Percentage: $throughput_percentage%" >> gc_analysis_report.txt
          echo "Minor GC Count: $minor_gc_count" >> gc_analysis_report.txt
          echo "Full GC Count: $full_gc_count" >> gc_analysis_report.txt
          echo "Average Allocation Rate: $avg_allocation_rate MB/sec" >> gc_analysis_report.txt

      - name: Display GC Analysis Results
        run: cat gc_analysis_report.txt

      - name: Upload k6 test results and GC analysis
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.GCNAME }}-k6-results-and-analysis
          path: |
            cpuinfo.txt
            meminfo.txt
            ${{ env.GCNAME }}-test-results.csv
            ${{ env.GCNAME }}-health-test-summary.json
            ${{ env.GCNAME }}-greet-test-summary.json
            ${{ env.GCNAME }}-gc.log
            gceasy-response-${{ env.GCNAME }}.json
            gc_analysis_report.txt  # Upload the generated report

      - name: Stop container
        run: |
          docker ps
          docker stop trivy-demo-${{ env.GCNAME }}
          docker container prune -f
          docker ps
